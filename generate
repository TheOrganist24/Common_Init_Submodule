#!/bin/bash

NAME=${PWD##*/}

if [ -n "$1" ]
then
  OPTION=$1
else
  echo "No repo type provided; exiting."
  exit 1
fi

if [ -n "$2" ]
then
  SUMMARY=$2
else
  SUMMARY="A code project from TheOrganist24"
fi


main () {
  # capture variables
  OPTION=$1
  NAME=$2
  SUMMARY=$3
  
  # create common files
  common_files "$NAME" "$SUMMARY"
  
  # create language specific files and directories
  case $OPTION in
    Python|python|Python3|python3)
      python_repo "$NAME" "$SUMMARY"
      ;;
    C|c)
      c_repo "$NAME" "$SUMMARY"
      ;;
    C|c)
      latex_repo "$NAME" "$SUMMARY"
      ;;
    *)
      echo "Expected \"Python3\", or \"C\"; doing nothing."
      exit 1
      ;;
  esac
  
  # initialise git repo and commit base files
  common_repo_actions
  echo Repo created - feel free to run \`git push\`
}


common_files () {
  NAME=$1
  SUMMARY=$2
  
  # create README
  if [ ! -f README.md ]
  then
    cat << EOF > README.md
![TheOrganist24 Code](https://hosted.courtman.me.uk/img/logos/theorganist24_banner_code.png "TheOrganist24 Code")

# ${NAME^^}
> $SUMMARY

## Getting Started
EOF
  fi

  # add placeholders for other standard files
  for FILE in Makefile .gitignore pre-commit VERSION
  do
    if [ ! -f $FILE ]
    then
      touch $FILE
    fi
  done
  
  if [ ! -f LICENSE ]
  then
    cat << EOF > LICENSE
MIT License

Copyright (c) $(date +%Y) TheOrganist24

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
  fi

  # create common directories
  if [ ! -d img ]
  then
    mkdir --parents img/src
    touch img/src/.gitkeep
  fi
}


common_repo_actions() {
  if [ ! -d .git ]
  then
    git init
    make dev-environment
    git add .
    git commit --message="INIT: with TheOrganist24 repo generator."
    git branch -m development
  else
    git add .
    git commit --message="INIT: Update initialised files."
  fi
}


python_repo () {
  NAME=$1
  SUMMARY=$2
  
  # check poetry is installed and setup
  if ! poetry --version 2&> /dev/null 
  then 
    echo Recommend install poetry  https://python-poetry.org/docs/master/#installing-with-the-official-installer
  fi
  if [ ! -f pyproject.toml ]
  then
    cat << EOF > pyproject.toml
[tool.poetry]
name = "${NAME,,}"
version = "0.1.0"
description = "${SUMMARY}"
authors = ["TheOrganist24 <code@theorganist24.co.uk>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.8"
loguru = "^0.5.3"

[tool.poetry.dev-dependencies]
pycodestyle = "^2.8.0"
pydocstyle = "^6.1.1"
pytest = "^4.6"
pytest-cov = "^3.0.0"
mypy = "^0.931"
toml = "^0.10.2"
loguru-mypy = "^0.0.4"
isort = "^5.10.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
astronomical = "${NAME,,}.${NAME,,}:main"
EOF
  fi
  
  # setup package and test directories
  for FOLDER in ${NAME,,} tests
  do
    if [ ! -d $FOLDER ]
    then
      mkdir $FOLDER
      touch $FOLDER/__init__.py
    fi
  done
  echo \"\"\"Package for ${NAME^^}.\"\"\" > ${NAME,,}/__init__.py
  echo \"\"\"Main instantiation for ${NAME^^}.\"\"\" > ${NAME,,}/${NAME,,}.py
  
  if [ ! -f ${NAME,,}/${NAME,,}.py ]
  then
    touch ${NAME,,}/${NAME,,}.py
  fi
  if [ ! -f tests/test_${NAME,,}.py ]
  then
    touch tests/test_${NAME,,}.py
  fi
  
 
  # setup Makefile and pre-commit
  cat << EOF > Makefile
# environment
SHELL=/bin/bash
EXECUTE=poetry run
VERSION=\$\$(cat VERSION)

# code
PACKAGE=${NAME,,}

# file groups
LINT_GROUP=\$(PACKAGE)
TEST_GROUP=tests/test_*.py tests/*/test_*.py

# targets
## standard
all: build

install:
	python3 -m pip install ./dist/\$(PACKAGE)-\$(VERSION)-py3-none-any.whl

uninstall:
	python3 -m pip uninstall \$(PACKAGE)

clean:
	rm -rf dist

info:

check: format lint test

## less standard
dev:
	cp pre-commit .git/hooks/
	poetry install

pre-commit: lint

format:
	\$(EXECUTE) isort \$(LINT_GROUP)

lint:
	\$(EXECUTE) pycodestyle \$(LINT_GROUP)
	\$(EXECUTE) pydocstyle \$(LINT_GROUP)
	\$(EXECUTE) mypy \$(LINT_GROUP)

test:
	\$(EXECUTE) python3 -m unittest \$(TEST_GROUP)

coverage:
	\$(EXECUTE) pytest --cov=\$(PACKAGE) \$(TEST_GROUP)

build:
	poetry build
EOF
  echo "make pre-commit" > pre-commit
  chmod +x pre-commit
  
  echo "__pycache__
dist
.coverage" > .gitignore
  
  # update docs
  cat << EOF >> README.md
\`\`\`bash
poetry run ${NAME,,}
\`\`\`


## Development
### Setting up Environment
\`\`\`bash
git clone git@gitlab.com:TheOrganist24/${NAME,,}.git
cd ${NAME,,}
make dev
export LOG_LEVEL=INFO  # Optional; supports DEBUG, INFO, WARNING, ERROR, CRITICAL
poetry run ${NAME,,} --version
\`\`\`


### Versioning
Semantic versioning is used:
\`\`\`
poetry version <MAJOR,MINOR,PATCH>
poetry version --short > VERSION
\`\`\`

Also don't forget to update \`${NAME,,}/__init__.py\` and \`tests/test_${NAME,,}.py\`.


### Lint and Test
Code should be compliant with PEPs 8, 256, 484, and 526.
\`\`\`bash
make check  # calls \`make lint; make test\`
\`\`\`
EOF

}


c_repo () {
  NAME=$1
  SUMMARY=$2
}



main "$OPTION" "$NAME" "$SUMMARY"
